@page "/triggers-page"

@using RazorLib.Shared.navs.tabs
@using RazorLib.Shared;
@using SharedLib;
@using MudBlazor;

@* @inject IRefitScriptsService _refit_scripts;
@inject IRefitTriggersService _refit_trig;
@inject IRefitHardwaresService _refit_hw; *@
@inject ISnackbar _snack_bar;

@inherits BlazorBusyComponentBaseModel

<PageTitle>Тригеры</PageTitle>

<nav class="navbar navbar-light mb-3">
    <div class="container-fluid">
        <span class="navbar-brand">Тригеры [<small class="text-muted">запуск скриптов по событию</small>]</span>
        <div id="navbarSupportedContent">
            <form class="d-flex">
                <button @onclick="AddNewTrigger" class="btn btn-outline-success" type="button">Создать новый</button>
            </form>
        </div>
    </div>
</nav>
<div class="alert alert-info" role="alert">
    <cite class="text-primary">Автозапуск</cite> скриптов при наступлении какого-либо события на порту контроллера.
</div>
@if (IsBusyProgress)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-3">
            <MudList @ref="_listRef" Clickable="true" @bind-SelectedValue="selectedValue">
                <MudDivider DividerType="DividerType.Middle" />
                @foreach (TrigerModelDB trig in Triggers.OrderBy(x => x.Name))
                {
                    <MudListItem @key="trig.Id" Value="@(trig.Id)">
                        @trig.Name
                        <sup>[#@(trig.Id)]</sup>
                    </MudListItem>
                }
                <MudDivider DividerType="DividerType.Middle" />
            </MudList>
        </div>
        <div class="col-9">
            @if (int.Parse(selectedValue.ToString() ?? "0") == 0)
            {
                <figure class="text-center">
                    <blockquote class="blockquote">
                        <p>Нет ни одного тригера.</p>
                    </blockquote>
                    <figcaption class="blockquote-footer">
                        Создайте свой первый <cite title="Тригер">тригер</cite>
                    </figcaption>
                </figure>
            }
            else
            {
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            Тригер: '@(CurrentTrigger.Name)'
                            @if (CurrentTrigger.Id > 0)
                            {
                                <sup>@($"#{CurrentTrigger.Id}")</sup>
                            }
                            else
                            {
                                <sup class="text-info">[не записан]</sup>
                            }
                        </h5>
                        <hr />
                        <TabSetComponent>
                            <TabComponent Tooltip="Наименование и описание скрипта" Title="Описание">
                                <EditForm @ref="form" autocomplete="off" Model="@CurrentTrigger">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="mb-4">
                                        <div class="row">
                                            <div class="col">
                                                <label for="exampleInputTitle" class="form-label">Название</label>
                                                <CustomInputTextComponent @bind-Value="CurrentTrigger.Name" class="form-control" id="exampleInputTitle" aria-describedby="nameHelp" />
                                                <div id="nameHelp" class="form-text">Наименование скрипта.</div>
                                            </div>
                                            <div class="col">
                                                <label for="inputState" class="form-label">Скрипт</label>
                                                <select id="inputState" @bind="CurrentTrigger.ScriptId" class="form-select" aria-describedby="scriptHelp">
                                                    @foreach (ScriptModelDB s in Scripts)
                                                    {
                                                        <option value="@s.Id">@s.Name <sup>[#@s.Id]</sup></option>
                                                    }
                                                </select>
                                                <div id="scriptHelp" class="form-text">Запускаемая задача.</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-4">
                                        <label for="exampleInputTitle2" class="form-label">Описание</label>
                                        <InputRichTextComponent Id="exampleInputTitle2" @bind-Value="CurrentTrigger.Description" @ref="_textBox" />
                                    </div>
                                    <div class="form-check mb-4">
                                        <InputCheckbox class="form-check-input" @bind-Value="CurrentTrigger.IsDisable" id="flexCheckDefault" />
                                        <label class="form-check-label" for="flexCheckDefault">
                                            @if (CurrentTrigger.IsDisable)
                                            {
                                                <span>Отключено<sup>Включить?</sup></span>
                                            }
                                            else
                                            {
                                                <span>Включено<sup>Выключить?</sup></span>
                                            }
                                        </label>
                                    </div>
                                    @if (CurrentTrigger.Id > 0)
                                    {
                                        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-3">
                                            <button @onclick="SaveTriggerHandle" disabled="@(!CanSaveTrigger)" class="btn btn@(CanSaveTrigger ? "" : "-outline")-primary" type="button">Сохранить</button>
                                            <button @onclick="ResetFormToOrignState" disabled="@(!CanSaveTrigger && !trigger_init_del)" class="btn btn@(!CanSaveTrigger && !trigger_init_del ? "-outline" : "")-info" type="button">Отмена</button>
                                            <button @onclick="DeleteTrigger" class="btn btn@(trigger_init_del ? "" : "-outline")-danger" type="button">@(trigger_init_del ? "Подтвердить удаление" : "Удалить")</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="d-grid gap-2">
                                            <button @onclick="SaveTriggerHandle" disabled="@(!CanSaveTrigger)" class="btn btn@(!CanSaveTrigger ? "-outline" : "")-primary" type="button">Записать</button>
                                            @if (trigger_init_del)
                                            {
                                                <button @onclick="ResetFormToOrignState" class="btn btn-info" type="button">Отмена</button>
                                            }
                                            <button @onclick="DeleteTrigger" class="btn btn-@(trigger_init_del ? "" : "outline-")danger" type="button">@(trigger_init_del ? "Подтвердить удаление" : "Удалить")</button>
                                        </div>
                                    }
                                </EditForm>
                            </TabComponent>
                            <TabComponent IsDisabled="CurrentTrigger.Id <= 0" Tooltip="Условия запуска" Title="События">
                                <ConditionsComponent @ref="conditions_ref" EntriesTreeHW="EntriesTreeHW" OwnerId="CurrentTrigger.Id" ConditionType="ConditionsTypesEnum.Trigger" />
                            </TabComponent>
                        </TabSetComponent>
                    </div>
                </div>
            }
        </div>
    </div>
}

<ModalWindowComponent @ref="Modal">
    <p>@ModalBodyText</p>
</ModalWindowComponent>
<ShowMessagesComponent @ref="showMessages" />
@code {
    public EntryNestedModel[] EntriesTreeHW { get; set; } = Array.Empty<EntryNestedModel>();

    ConditionsComponent? conditions_ref;
    MudList? _listRef;

    object _selVal = 0;
    object selectedValue
    {
        get
        {
            if (_selVal.ToString() == "0" && _curTrig.Id != 0)
            {
                return _curTrig.Id;
            }
            if (_selVal.ToString() == "0" && Triggers.Any())
            {
                _curTrig = Triggers.First();
                return _curTrig.Id;
            }
            return _selVal;
        }
        set
        {
            ResetFormToOrignState();
            _selVal = value;
            if (_selVal.ToString() != _curTrig.Id.ToString() && int.TryParse(_selVal.ToString(), out int selected_id))
            {
                _curTrig = Triggers.FirstOrDefault(x => x.Id == selected_id) ?? new();
            }
            if (conditions_ref is not null)
                conditions_ref?.Rest(_curTrig.Id, ConditionsTypesEnum.Trigger);

            trigger_name_orign = CurrentTrigger.Name;
            trigger_desc_orign = CurrentTrigger.Description ?? "";
            trigger_is_off = CurrentTrigger.IsDisable;
            trigger_script = CurrentTrigger.ScriptId;
        }
    }

    TrigerModelDB _curTrig = new();
    TrigerModelDB CurrentTrigger
    {
        get
        {
            if (_curTrig.Id == 0 && _selVal.ToString() != "0" && int.TryParse(_selVal.ToString(), out int selected_id))
            {
                _curTrig = Triggers.FirstOrDefault(x => x.Id == selected_id) ?? new();
            }

            return _curTrig;
        }
        set
        {
            _curTrig = value;

            if (_selVal.ToString() != _curTrig.Id.ToString() && int.TryParse(_selVal.ToString(), out int selected_id))
            {
                _selVal = Triggers.FirstOrDefault(x => x.Id == selected_id)?.Id ?? 0;
            }
        }
    }

    EditForm? form;
    InputRichTextComponent? _textBox;

    List<TrigerModelDB> Triggers = new();
    List<ScriptModelDB> Scripts = new();
    ShowMessagesComponent? showMessages;

    ModalWindowComponent? Modal { get; set; }
    string ModalBodyText { get; set; } = string.Empty;

    bool CanSaveTrigger
    {
        get
        {
            return !string.IsNullOrWhiteSpace(CurrentTrigger.Name) &&
            (CurrentTrigger.Id < 1 || trigger_script != CurrentTrigger.ScriptId || trigger_is_off != CurrentTrigger.IsDisable || trigger_name_orign != CurrentTrigger.Name || trigger_desc_orign != CurrentTrigger.Description);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsBusyProgress = true;

        // ApiResponse<ScriptsResponseModel> rest_all_scripts = await _refit_scripts.ScriptsGetAll();

        // if (rest_all_scripts.Content?.Scripts is null)
        // {
        //     _snack_bar.Add("rest_all_scripts.Content?.Scripts is null ошибка {5B557F50-0F44-40CD-A5B4-10A58F78D701}", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        //     return;
        // }

        // Scripts = rest_all_scripts.Content.Scripts;

        // ApiResponse<TriggersResponseModel> rest_all_triggers = await _refit_trig.TriggersGetAll();
        // if (rest_all_triggers.Content?.Triggers is null)
        // {
        //     _snack_bar.Add("rest_all_triggers.Content?.Triggers is null ошибка {4334BFB1-481E-460D-9E21-B8782DEA3DCA}", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        //     return;
        // }
        // Triggers = new(rest_all_triggers.Content.Triggers.OrderBy(x => x.Name));
        // if (Triggers.Any())
        //     _curTrig = Triggers.First();

        // ApiResponse<EntriesNestedResponseModel> rest_hw_tree = await _refit_hw.HardwaresGetTreeNestedEntries();
        // if (rest_hw_tree.Content?.Entries is null)
        // {
        //     _snack_bar.Add("rest_hw_tree.Content?.Entries is null ошибка {7A0F6B2C-8286-4CB5-84AB-7F954831FE94}", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        //     return;
        // }
        // EntriesTreeHW = rest_hw_tree.Content.Entries;

        trigger_name_orign = _curTrig.Name;
        trigger_desc_orign = _curTrig.Description ?? "";
        trigger_is_off = _curTrig.IsDisable;
        trigger_script = _curTrig.ScriptId;

        ResetFormToOrignState();
        IsBusyProgress = false;
    }

    string trigger_name_orign = string.Empty;
    string trigger_desc_orign = string.Empty;
    bool trigger_is_off = false;
    int trigger_script;
    //
    bool trigger_init_del = false;

    void AddNewTrigger()
    {
        string new_name = string.Empty;
        foreach (int i in Enumerable.Range(1, int.MaxValue))
        {
            new_name = $"тригер new:{i}";
            if (!Triggers.Any(x => x.Name.ToLower() == new_name.ToLower()))
                break;
        }

        int _id = Triggers.Any() ? Triggers.Min(x => x.Id) - 1 : -1;
        if (_id > -1)
            _id = -1;

        Triggers.Add(new() { Id = _id, Name = new_name, Conditions = new() });
        selectedValue = Triggers.Last().Id;
    }

    void ResetFormToOrignState()
    {
        trigger_init_del = false;
        CurrentTrigger.Name = trigger_name_orign;
        CurrentTrigger.Description = trigger_desc_orign;
        CurrentTrigger.IsDisable = trigger_is_off;
        CurrentTrigger.ScriptId = trigger_script;
        _textBox?.SetValue(trigger_desc_orign);
    }

    async Task DeleteTrigger()
    {
        if (!trigger_init_del)
        {
            trigger_init_del = true;
            return;
        }
        IsBusyProgress = true;
        if (CurrentTrigger.Id > 0)
        {
            // var rest = await _refit_trig.TriggerDelete(CurrentTrigger.Id);
            // if (!rest.IsSuccessStatusCode)
            // {
            //     ModalBodyText = $"Ошибка: {rest.StatusCode}";
            //     Modal?.Open("Ошибка");
            //     return;
            // }
            // if (rest.Content is null)
            // {
            //     ModalBodyText = $"rest.Content is null";
            //     Modal?.Open("Ошибка");
            //     return;
            // }
            // if (!rest.Content.IsSuccess)
            // {
            //     ModalBodyText = rest.Content.Message;
            //     Modal?.Open("Ошибка");
            //     return;
            // }
            Triggers.RemoveAt(Triggers.FindIndex(x => x.Id == CurrentTrigger.Id));
        }
        else
        {
            Triggers.RemoveAt(Triggers.FindIndex(x => x.Id == CurrentTrigger.Id));
        }

        selectedValue = Triggers.FirstOrDefault()?.Id ?? 0;

        ResetFormToOrignState();

        IsBusyProgress = false;
    }

    async Task SaveTriggerHandle()
    {
        IsBusyProgress = true;
        // ApiResponse<TriggersResponseModel> rest = await _refit_trig.TriggerUpdateOrCreate(CurrentTrigger);

        // if (!rest.IsSuccessStatusCode)
        // {
        //     ModalBodyText = $"Ошибка выполенния rest запроса: {rest.StatusCode}";
        //     Modal?.Open("Ошибка");
        //     IsBusyProgress = false;
        //     return;
        // }

        // if (rest.Content.IsSuccess != true)
        // {
        //     ModalBodyText = rest.Content.Message;
        //     Modal?.Open("Ошибка");
        //     IsBusyProgress = false;
        //     return;
        // }

        // showMessages?.ShowMessages(rest.Content.Messages);

        // if (rest.Content.Triggers is null)
        // {
        //     _snack_bar.Add("", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        //     return;
        // }

        // TrigerModelDB src = rest.Content.Triggers.First(x => x.Name == CurrentTrigger.Name);
        // _curTrig.Id = src.Id;
        // _curTrig.Name = src.Name;
        // _curTrig.Description = src.Description;
        // _curTrig.IsDisable = src.IsDisable;
        // _curTrig.ScriptId = src.ScriptId;

        // trigger_name_orign = src.Name;
        // trigger_desc_orign = src.Description ?? "";
        // trigger_is_off = src.IsDisable;
        // trigger_script = src.ScriptId;
        ResetFormToOrignState();

        // int[] rows_for_del = Triggers.Where(x => x.Id > 0 && !rest.Content.Triggers.Any(y => y.Id == x.Id)).Select(x => x.Id).Distinct().ToArray();
        // while (Triggers.Any(x => rows_for_del.Contains(x.Id)))
        // {
        //     Triggers.RemoveAt(Triggers.FindIndex(x => rows_for_del.Contains(x.Id)));
        // }
        // TrigerModelDB[] rows_for_add = rest.Content.Triggers.Where(x => x.Id != src.Id && !Triggers.Any(y => y.Id == x.Id)).ToArray();
        // if (rows_for_add.Any())
        // {
        //     Triggers.AddRange(rows_for_add);
        // }

        // Triggers.RemoveAt(Triggers.FindIndex(x => x.Id == src.Id));
        // Triggers.Add(src);
        // selectedValue = src.Id;

        IsBusyProgress = false;
    }
}