@using MudBlazor;
@using SharedLib;

@inherits BlazorBusyComponentBaseModel
@implements IDisposable

@inject IHardwiresService _hardwires

@if (IsBusyProgress)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else if (HardwiresElements?.Any() != true)
{
    <div class="alert alert-danger" role="alert">
        Устройств нет
    </div>
}
else
{
    int num_count = 0;
    <MudTable Items="@HardwiresElements" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@IsBusyProgress" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>Name/Address</MudTh>
            <MudTh>Ports</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="#">
                @(++num_count)
            </MudTd>
            <MudTd DataLabel="Name/Address">
                <a class="link-light link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover" href="/hardware-page/@(context.Id)">
                    @(string.IsNullOrWhiteSpace(context.Name) ? "" : $"{context.Name} >> ")@(context.Address)
                </a>
            </MudTd>
            <MudTd DataLabel="Ports">
                <CascadingValue Value="@context.Id">
                    <CascadingValue Value="ReloadHardwires">
                        @if (context.Ports?.Any() == true)
                        {
                            @foreach (PortHardwareModel port in context.Ports)
                            {
                                <PortViewHardwareComponent Port="port" />
                            }
                        }
                        else
                        {
                            <MudTooltip Text="Для инициализации откройте контролер на вкладке ретранслятора и разверните узлы портов XP1 и XP2.">
                                <MudAlert Severity="Severity.Info">Устройство не инициализировано</MudAlert>
                            </MudTooltip>
                        }
                    </CascadingValue>
                </CascadingValue>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    IEnumerable<HardwareModel> HardwiresElements = Enumerable.Empty<HardwareModel>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateList();
    }

    async Task UpdateList()
    {
        IsBusyProgress = true;
        TResponseModel<List<HardwareModel>> res = await _hardwires.HardwiresGetAll(CancellationToken);
        HardwiresElements = res?.Response ?? Enumerable.Empty<HardwareModel>();
        IsBusyProgress = false;
    }

    public void ReloadHardwires()
    {
        InvokeAsync(async () => { IsBusyProgress = true; StateHasChanged(); await UpdateList(); StateHasChanged(); });
    }
}