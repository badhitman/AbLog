@using SharedLib


<style>
    .alert-msg ul {
        margin-bottom: unset;
    }
</style>

<div class="modal @ModalClass" tabindex="-1" style="display:@ModalDisplay">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle</h5>
                <button style="top: 25px!important;right: 25px!important;" type="button" class="btn-close position-absolute top-0 end-0" data-bs-dismiss="modal" aria-label="Close" @onclick="() => Close()"></button>
            </div>
            <div class="modal-body alert-msg">
                @ChildContent
                @if (Messages?.Any() == true)
                {
                    if (Messages.Any(x => x.TypeMessage == ResultTypeEnum.Warning))
                    {
                        <div class="alert alert-warning" role="alert">
                            <ul>
                                @foreach (var r in Messages.Where(x => x.TypeMessage == ResultTypeEnum.Warning))
                                {
                                    <li>@(r.Text)</li>
                                }
                            </ul>
                        </div>
                    }
                    if (Messages.Any(x => x.TypeMessage == SharedLib.ResultTypeEnum.Alert))
                    {
                        <div class="alert alert-alert" role="alert">
                            <ul>
                                @foreach (var r in Messages.Where(x => x.TypeMessage == SharedLib.ResultTypeEnum.Alert))
                                {
                                    <li>@(r.Text)</li>
                                }
                            </ul>
                        </div>
                    }
                    if (Messages.Any(x => x.TypeMessage == SharedLib.ResultTypeEnum.Info))
                    {
                        <div class="alert alert-info" role="alert">
                            <ul>
                                @foreach (var r in Messages.Where(x => x.TypeMessage == SharedLib.ResultTypeEnum.Info))
                                {
                                    <li>@(r.Text)</li>
                                }
                            </ul>
                        </div>
                    }
                    if (Messages.Any(x => x.TypeMessage == SharedLib.ResultTypeEnum.Success))
                    {
                        <div class="alert alert-success" role="alert">
                            <ul>
                                @foreach (var r in Messages.Where(x => x.TypeMessage == SharedLib.ResultTypeEnum.Success))
                                {
                                    <li>@(r.Text)</li>
                                }
                            </ul>
                        </div>
                    }
                    if (Messages.Any(x => x.TypeMessage == SharedLib.ResultTypeEnum.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            <ul>
                                @foreach (var r in Messages.Where(x => x.TypeMessage == SharedLib.ResultTypeEnum.Error))
                                {
                                    <li>@(r.Text)</li>
                                }
                            </ul>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; } = default!;

    IEnumerable<ResultMessage>? Messages { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    private string ModalTitle = string.Empty;

    public void Open(string model_title, IEnumerable<ResultMessage>? messages = null)
    {
        ModalTitle = model_title;
        ModalDisplay = "block;";
        ModalClass = "show";
        ShowBackdrop = true;
        Messages = messages;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none;";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}