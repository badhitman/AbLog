@using MudBlazor;
@using SharedLib;

@inherits BlazorBusyComponentBaseModel

@inject ISystemCommandsService _comm
@inject ISnackbar Snackbar;

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Системное меню</h5>
        <h6 class="card-subtitle mb-2 text-body-secondary">Эти команды будут доступны в системном меню TelegramBot (права: система)</h6>
        <div class="d-flex flex-row-reverse mb-3">
            <form class="row row-cols-lg-auto g-3 align-items-center">
                <div class="col-12">
                    <label class="visually-hidden" for="inlineFormInputGroupTitle">Название</label>
                    <div class="input-group">
                        <input @bind-value="createCommand.Name" @bind-value:event="oninput" type="text" class="form-control" id="inlineFormInputGroupTitle" placeholder="Наименование">
                    </div>
                </div>

                <div class="col-12">
                    <label class="visually-hidden" for="inlineFormInputGroupFilename">Имя файла</label>
                    <div class="input-group">
                        <input @bind-value="createCommand.FileName" @bind-value:event="oninput" type="text" class="form-control" id="inlineFormInputGroupFilename" placeholder="Имя файла">
                    </div>
                </div>

                <div class="col-12">
                    <label class="visually-hidden" for="inlineFormInputGroupArguments">Аргументы</label>
                    <div class="input-group">
                        <input @bind-value="createCommand.Arguments" @bind-value:event="oninput" type="text" class="form-control" id="inlineFormInputGroupArguments" placeholder="Аргументы">
                    </div>
                </div>

                <div class="col-12">
                    <button disabled="@(!CanAddingSystemCommand)" @onclick="AddNewCommand" type="button" class="btn btn-primary">Добавить</button>
                </div>
            </form>
        </div>
        <MudTable Items="@SystemCommands" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@IsBusyProgress" CommitEditTooltip="Commit Edit"
                  OnCommitEditClick="SaveElement"
                  RowEditPreview="BeckupEditItem" RowEditCancel="ResetItemToOriginalValues"
                  LoadingProgressColor="Color.Info" CanCancelEdit="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Консольные команды операционной системы</MudText>
                <MudSpacer />

            </ToolBarContent>
            <HeaderContent>
                <MudTh>Title</MudTh>
                <MudTh>FileName</MudTh>
                <MudTh>Arguments</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.FileName</MudTd>
                <MudTd>@context.Arguments</MudTd>
                <MudTd>
                    <div class="btn-group btn-group-sm" role="group" aria-label="Basic example" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                        <MudTooltip Text="@(context.IsDisabled ? "Отключённая команда не выводится пользователям в системном меню TelegramBot" : "Команда доступна пользователям в системном меню TelegramBot")">
                            @if (context.IsDisabled)
                            {

                                <button type="button" disabled class="btn btn-outline-secondary">Отключено</button>

                            }
                            else
                            {
                                <button type="button" disabled class="btn btn-outline-success">Включено</button>
                            }
                        </MudTooltip>
                        <MudTooltip Text="Выполненить команду на сервере">
                            <button @onclick="@(async () => { await RunCommand(context.Id); })" class="btn btn-outline-primary">Запустисть</button>
                        </MudTooltip>
                        <SystemCommandDeleteButtonsComponent CommandId="context.Id" UpdateCommandsList="@(async () => { await UpdateCommandsList(); StateHasChanged(); })" />
                    </div>
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Name">
                    <MudTextField @bind-Value="@context.Name" Required />
                </MudTd>
                <MudTd DataLabel="FileName">
                    <MudTextField @bind-Value="@context.FileName" Required />
                </MudTd>
                <MudTd DataLabel="Arguments">
                    <MudTextField @bind-Value="@context.Arguments" Required />
                </MudTd>
                <MudTd DataLabel="IsDisabled">
                    <MudCheckBox Label="@(context.IsDisabled ? "Отключено (включить?)" : "Включено (отключить?)")" @bind-Value="@context.IsDisabled" />
                </MudTd>
            </RowEditingTemplate>
            <NoRecordsContent>
                <MudText>
                    <p>Нет ни одной команды...</p>
                    <p>Добавить: [<span @onclick="CreateDefaultCommandReboot" style="cursor: pointer;" class="link-primary">/usr/bin/sudo reboot</span>] ?</p>
                </MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Загрузка...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
            <EditButtonContent Context="button">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
            </EditButtonContent>
        </MudTable>
    </div>
</div>

@code {
    bool CanAddingSystemCommand => !string.IsNullOrWhiteSpace(createCommand.FileName) && !string.IsNullOrWhiteSpace(createCommand.Name);
    SystemCommandModelDB createCommand = new();
    SystemCommandModelDB elementBeforeEdit = new();
    private List<string> editEvents = new();

    IEnumerable<SystemCommandModelDB> SystemCommands = Enumerable.Empty<SystemCommandModelDB>();

    void SaveElement(MouseEventArgs element)
    {
        SystemCommandModelDB? sender = SystemCommands.FirstOrDefault(x => x.Id == elementBeforeEdit.Id);

        if (sender is null)
        {
            Snackbar.Add("sender is null. error {C24B208F-15EE-4F32-B853-5FE9C6AB0F41}", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);

            return;
        }

        if (string.IsNullOrWhiteSpace(sender.FileName) || string.IsNullOrWhiteSpace(sender.Name))
        {
            Snackbar.Add("string.IsNullOrWhiteSpace(sender.FileName) || string.IsNullOrWhiteSpace(sender.Name). error {06356BA7-CD2D-48E3-BC22-B4FBF1276231}", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
            sender.FileName = elementBeforeEdit.FileName;
            sender.Arguments = elementBeforeEdit.Arguments;
            sender.IsDisabled = elementBeforeEdit.IsDisabled;
            sender.Name = elementBeforeEdit.Name;
            return;
        }

        InvokeAsync(async () =>
        {
            IsBusyProgress = true;
            StateHasChanged();
            ResponseBaseModel upd_command = await _comm.CommandUpdateOrCreate(sender);
            Snackbar.ShowMessagesResponse(upd_command.Messages);
            if (!upd_command.IsSuccess)
            {
                IsBusyProgress = false;
                StateHasChanged();
                return;
            }
            //
            elementBeforeEdit = GlobalStatic.CreateDeepCopy<SystemCommandModelDB>(sender);
            await UpdateCommandsList();
            IsBusyProgress = false;
            StateHasChanged();
        });
    }

    void BeckupEditItem(object element)
    {
        SystemCommandModelDB sender = (SystemCommandModelDB)element;

        elementBeforeEdit = GlobalStatic.CreateDeepCopy<SystemCommandModelDB>(sender);

        AddEditionEvent($"RowEditPreview event: made a backup of Element [{((SystemCommandModelDB)element).FileName} {((SystemCommandModelDB)element).Arguments}]");
    }

    async Task RunCommand(int command_id)
    {
        IsBusyProgress = true;
        ResponseBaseModel run_cmd_res = await _comm.CommandRun(command_id);
        IsBusyProgress = false;
        Snackbar.ShowMessagesResponse(run_cmd_res.Messages);
    }

    private void ResetItemToOriginalValues(object element)
    {
        SystemCommandModelDB sender = (SystemCommandModelDB)element;
        sender.FileName = elementBeforeEdit.FileName;
        sender.Arguments = elementBeforeEdit.Arguments;
        sender.IsDisabled = elementBeforeEdit.IsDisabled;
        sender.Name = elementBeforeEdit.Name;
        AddEditionEvent($"RowEditCancel event: Editing of Element [{((SystemCommandModelDB)element).FileName} {((SystemCommandModelDB)element).Arguments}] canceled");
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    async Task AddNewCommand()
    {
        if (!CanAddingSystemCommand)
        {
            Snackbar.Add("Имя файла и название команды обязательны для заполнения", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
            return;
        }
        IsBusyProgress = true;

        ResponseBaseModel adding_command = await _comm.CommandUpdateOrCreate(createCommand);
        if (!adding_command.IsSuccess)
        {
            IsBusyProgress = false;
            Snackbar.ShowMessagesResponse(adding_command.Messages);
            return;
        }
        createCommand = new();

        await UpdateCommandsList();
        IsBusyProgress = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateCommandsList();
    }

    async Task UpdateCommandsList()
    {
        IsBusyProgress = true;
        TResponseModel<List<SystemCommandModelDB>> elements = await _comm.CommandsGetAll();
        IsBusyProgress = false;
        Severity _style;
        foreach (ResultMessage m in elements.Messages)
        {
            _style = m.TypeMessage switch
            {
                ResultTypesEnum.Success => Severity.Success,
                ResultTypesEnum.Info => Severity.Info,
                ResultTypesEnum.Warning => Severity.Warning,
                ResultTypesEnum.Error => Severity.Error,
                _ => Severity.Normal
            };
            Snackbar.Add(m.Text, _style, opt => opt.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        }
        if (elements.Response is not null)
        {
            SystemCommands = elements.Response;
        }
    }

    async Task CreateDefaultCommandReboot()
    {
        createCommand = new SystemCommandModelDB()
            {
                Name = "Reboot",
                FileName = "/usr/bin/sudo",
                Arguments = "reboot",
                IsDisabled = false
            };
        await AddNewCommand();
    }
}