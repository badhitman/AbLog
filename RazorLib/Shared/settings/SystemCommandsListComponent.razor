@using MudBlazor;
@using SharedLib;

@inherits BlazorBusyComponentBaseModel

@inject ISystemCommandsService _comm
@inject ISnackbar _snackbar;

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Системные команды</h5>
        <h6 class="card-subtitle mb-2 text-body-secondary">Консольная команда операционной системы</h6>

        <MudTable Items="@SystemCommands" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@IsBusyProgress" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>FileName</MudTh>
                <MudTh>Arguments</MudTh>
                <MudTh>IsDisabled</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="FileName">@context.FileName</MudTd>
                <MudTd DataLabel="Arguments">@context.Arguments</MudTd>
                <MudTd DataLabel="IsDisabled">@context.IsDisabled</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>Нет ни одной заиси...</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Загрузка...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
</div>
<ShowMessagesComponent @ref="showMessages" />
@code {
    ShowMessagesComponent? showMessages;

    IEnumerable<SystemCommandModelDB> SystemCommands = Enumerable.Empty<SystemCommandModelDB>();

    protected override async Task OnInitializedAsync()
    {
        SystemCommandsResponseModel elements = await _comm.CommandsGetAll();
        Severity _style;
        foreach (ResultMessage m in elements.Messages)
        {
            _style = m.TypeMessage switch
            {
                ResultTypeEnum.Success => Severity.Success,
                ResultTypeEnum.Info => Severity.Info,
                ResultTypeEnum.Warning => Severity.Warning,
                ResultTypeEnum.Error => Severity.Error,
                _ => Severity.Normal
            };
            _snackbar.Add(m.Text, _style, opt => opt.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        }
        if (elements.SystemCommands is not null)
        {
            SystemCommands = elements.SystemCommands;
        }

    }
}
