@using MudBlazor;
@using SharedLib;

@inherits BlazorBusyComponentBaseModel

@inject IParametersStorageService _storage
@inject IToolsService _tools
@inject ISnackbar _snackbar

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Настройки подключения к MQTT</h5>
        <hr />
        <EditForm EditContext="editContext" OnSubmit="SaveConfMqtt">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <label for="exampleInputServer" class="form-label">Сервер</label>
                    <input @bind-value="conf.Server" @bind-value:event="oninput" type="text" class="form-control" id="exampleInputServer" aria-describedby="serverHelp">
                    <div id="serverHelp" class="form-text">Адрес сервера MQTT</div>
                </div>
                <div class="col-sm">
                    <label for="exampleInputPort" class="form-label">Порт</label>
                    <input @bind-value="conf.Port" @bind-value:event="oninput" type="number" class="form-control" id="exampleInputPort" aria-describedby="portHelp">
                    <div id="portHelp" class="form-text">MQTT</div>
                </div>
                <div class="col-sm">
                    <label for="exampleInputMaxSize" class="form-label">Размер пакета</label>
                    <input @bind-value="conf.MessageMaxSizeBytes" @bind-value:event="oninput" type="number" class="form-control" id="exampleInputMaxSize" aria-describedby="maxSizeHelp">
                    <div id="maxSizeHelp" class="form-text">bytes max.</div>
                </div>
            </div>
            <div class="row g-3 mb-3">
                <div class="col">
                    <label for="exampleInputLogin" class="form-label">Логин</label>
                    <input @bind-value="conf.Username" @bind-value:event="oninput" type="text" class="form-control" id="exampleInputLogin" aria-describedby="loginHelp">
                    <div id="loginHelp" class="form-text">Имя пользователя для авторизации на сервере MQTT.</div>
                </div>
                <div class="col">
                    <label for="exampleInputPassword" class="form-label">Пароль</label>
                    <div class="input-group mb-3">
                        <input @bind-value="conf.Password" @bind-value:event="oninput" type="@(ShowPassword ? "text" : "password")" class="form-control" id="exampleInputPassword" aria-describedby="passwordHelp">
                        <button @onclick="() => { ShowPassword = !ShowPassword; }" class="btn btn@(ShowPassword ? "" : "-outline")-secondary" type="button">@(ShowPassword ? "Скрыть" : "Показать")</button>
                    </div>
                    <div id="passwordHelp" class="form-text">Пароль доступа для авторизации на сервере MQTT.</div>
                </div>
                <div class="col">
                    <label for="exampleInputClientId" class="form-label">Идентификатор клиента</label>
                    <input @bind-value="conf.ClientId" @bind-value:event="oninput" type="text" class="form-control" id="exampleInputClientId" aria-describedby="clientIdHelp">
                    <div id="clientIdHelp" class="form-text">Имя клиента (не логин).</div>
                </div>
            </div>
            <div class="form-check form-switch mb-3">
                <input checked="@conf.AutoStart" @bind-value="conf.AutoStart" @bind-value:event="oninput" class="form-check-input" type="checkbox" role="switch" id="exampleCheckAutostart">
                <label class="form-check-label" for="exampleCheckAutostart">Постоянное подключение (автоподключение при старте)</label>
            </div>
            <div class="card mb-3">
                <div class="card-header">
                    Шифрование
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="basic-addon1">Secret</span>
                            <input @bind-value="conf.Secret" @bind-value:event="oninput" type="@(ShowSecret ? "text" : "password")" class="form-control" id="exampleInputSecret" aria-describedby="secretHelp">
                            <button @onclick="() => { ShowSecret = !ShowSecret; }" class="btn btn@(ShowSecret ? "" : "-outline")-secondary" type="button">@(ShowSecret ? "Скрыть" : "Показать")</button>
                        </div>
                        <div id="secretHelp" class="form-text">Парольная фраза для защиты трафика MQTT сообщений</div>
                    </div>
                </div>
            </div>
            <div class="card mb-3">
                <div class="card-header">
                    Префикс MQTT имён топиков
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="basic-addon1">Префикс</span>
                            <input @bind-value="conf.PrefixMqtt" @bind-value:event="oninput" type="text" class="form-control" id="exampleInputPrefix" aria-describedby="prefixHelp">

                        </div>
                        <div id="prefixHelp" class="form-text">Для разделения разных серверных приложений друг от друга в рамках одного общего MQTT сервера</div>
                    </div>
                </div>
            </div>
            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                <div class="btn-group me-md-2" role="group" aria-label="Basic outlined example">
                    <button disabled="@(!IsEdit)" type="submit" class="btn btn-@(IsEdit ? "primary" : "outline-secondary")">Сохранить</button>
                    @if (IsEdit)
                    {
                        <button @onclick="() => conf = GlobalStatic.CreateDeepCopy(conf_self)" type="button" class="btn btn-outline-light">Отмена</button>
                    }
                </div>
                @if (ServiceIsRunning)
                {
                    <div class="btn-group me-md-2" role="group" aria-label="Basic outlined example">
                        <button @onclick="StopService" class="btn btn-outline-warning" type="button">Остановить службу</button>
                        <button disabled="@IsEdit" @onclick="RestartService" class="btn btn-outline-info" type="button">Перезапустить</button>
                    </div>
                }
                else
                {
                    <button disabled="@IsEdit" @onclick="RestartService" class="btn btn-outline-secondary" type="button">Запустить</button>
                }
                <button @onclick="TestConnect" class="btn btn-primary" type="button">Тест</button>
            </div>
        </EditForm>
    </div>
</div>
<ShowMessagesComponent @ref="showMessages" />

@code {
    MqttConfigModel conf = new();
    MqttConfigModel conf_self = new();
    private EditContext? editContext;
    bool IsEdit => conf != conf_self;
    bool ShowSecret = false;
    bool ShowPassword = false;

    bool ServiceIsRunning = false;

    ShowMessagesComponent? showMessages;

    protected override async Task OnInitializedAsync()
    {
        editContext = new(conf);
        IsBusyProgress = true;
        MqttConfigResponseModel res = await _storage.GetMqttConfig();
        showMessages?.ShowMessages(res.Messages);
        if (!res.IsSuccess || res.Conf is null)
        {
            IsBusyProgress = false;
            return;
        }
        conf = res.Conf;
        editContext = new(conf);
        conf_self = GlobalStatic.CreateDeepCopy(conf);

        await GetStatusService();

        IsBusyProgress = false;
    }

    async Task GetStatusService()
    {
        BoolResponseModel status = await _tools.StatusMqtt();
        ServiceIsRunning = status.Response;
        showMessages?.ShowMessages(status.Messages);
    }

    async Task StopService()
    {
        IsBusyProgress = true;
        ResponseBaseModel stop_res = await _tools.StopMqtt();
        showMessages?.ShowMessages(stop_res.Messages);
        await GetStatusService();
        IsBusyProgress = false;
    }

    async Task RestartService()
    {
        IsBusyProgress = true;
        ResponseBaseModel start_res = await _tools.StartMqtt();
        showMessages?.ShowMessages(start_res.Messages);
        await GetStatusService();
        IsBusyProgress = false;
    }

    async Task SaveConfMqtt()
    {
        bool? validate = editContext?.Validate();
        if (validate != true)
        {
            _snackbar.Add("Форма не заполнена!", Severity.Warning, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
            return;
        }

        IsBusyProgress = true;
        ResponseBaseModel res = await _storage.SaveMqttConfig(conf);
        showMessages?.ShowMessages(res.Messages);

        if (res.IsSuccess)
            conf_self = GlobalStatic.CreateDeepCopy(conf);

        IsBusyProgress = false;
    }

    async Task TestConnect()
    {
        IsBusyProgress = true;
        ResponseBaseModel res = await _tools.TestMqttConnect(conf);
        showMessages?.ShowMessages(res.Messages);
        IsBusyProgress = false;
    }
}