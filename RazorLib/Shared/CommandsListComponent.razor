@using SharedLib;
@using BlazorLib;
@using MudBlazor;
@using Refit;

@inject ILogger<CommandsListComponent> _logger;
@inject IRefitService _refit;
@inject ISnackbar _snackbar;

@inherits BlazorBusyComponentBaseModel

<style>
    .btn-pointer {
        cursor: pointer;
    }
</style>

@if (IsBusyProgress)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else if (Commands?.Any() == true)
{
    int i = 0;
    int count_commans = Commands.Count();
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Команда</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (EntrySortingModel com in Commands.OrderBy(x => x.Sorting))
            {
                ++i;
                <CommandRowOfListComponent MoveCommandAction="MoveCommandAction" AllowUpMove="@(i > 1)" AllowDownMove="@(i != count_commans)" AllCsripts="AllScripts" UpdateCommand="UpdateCommand" ScriptId="ScriptId" @key="com.Id" DeleteCommand="DeleteCommand" AddCommandAct="AddCommand" Command="com" SequenceNumber="@i" />
            }
        </tbody>
    </table>
}
else if (ScriptId > 0)
{
    <div class="d-grid gap-2 mt-3">
        <button @onclick="() => { AddCommand(0); }" class="btn btn-outline-dark" type="button">Добавить команду</button>
    </div>
}
else
{
    <figure class="text-end">
        <blockquote class="blockquote">
            <p>Скрипт не записан.</p>
        </blockquote>
        <figcaption class="blockquote-footer">
            Команды можно добавлять после <cite title="Source Title">записи скрипта</cite>
        </figcaption>
    </figure>
}
<ShowMessagesComponent @ref="showMessages" />
@code {
    [Parameter, EditorRequired]
    public int ScriptId { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<ScriptModelDB> AllScripts { get; set; } = default!;

    /// <summary>
    /// Команды
    /// </summary>
    List<EntrySortingModel> Commands = new();

    ShowMessagesComponent? showMessages;

    void MoveCommandAction(VerticalDirectionsEnum direction, int command_id)
    {
        if (Commands.Any(x => x.Id < 1))
        {
            _snackbar.Add("Некоторые команды не записаны. Для перемещения команд требуется что бы все команды были записаны", Severity.Warning, (opt) => { opt.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow; });
            return;
        }
        int index_com = Commands.FindIndex(x => x.Id == command_id);

        if (index_com < 0)
        {
            _snackbar.Add($"Ошибка. Не найден объект команды #{command_id}", Severity.Error, (opt) => { opt.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow; });
            return;
        }

        if ((direction == VerticalDirectionsEnum.Up && index_com == 0) || (direction == VerticalDirectionsEnum.Down && index_com == Commands.Count - 1))
        {
            _snackbar.Add($"Ошибка. Нельзя сдвинуть команду в этом направлении", Severity.Error, (opt) => { opt.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow; });
            return;
        }

        if (direction == VerticalDirectionsEnum.Up)
        {
            InvokeAsync(async () => await MoveCommandRest(new IdsPairModel() { Id1 = command_id, Id2 = Commands[index_com - 1].Id }));
        }
        else
        {
            InvokeAsync(async () => await MoveCommandRest(new IdsPairModel() { Id1 = command_id, Id2 = Commands[index_com + 1].Id }));
        }

    }

    async Task MoveCommandRest(IdsPairModel req)
    {
        IsBusyProgress = true;
        StateHasChanged();
        ApiResponse<EntriesSortingResponseModel> rest = await _refit.CommandSortingSet(req);

        if (rest.Content?.Entries is null)
        {
            _snackbar.Add("rest.Content?.Entries is null ошибка {D73FEEE5-38BC-4AFF-B1FA-E00CE50673F4}", Severity.Error, opt => opt.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
            return;
        }

        showMessages?.ShowMessages(rest.Content.Messages);

        if (!rest.Content.IsSuccess)
        {
            return;
        }

        EntrySortingModel[] for_add = rest.Content.Entries.Where(x => !Commands.Any(y => y.Id == x.Id)).ToArray();
        int[] for_del = Commands.Where(x => !rest.Content.Entries.Any(y => y.Id == x.Id)).Select(x => x.Id).ToArray();
        if (for_add.Any())
        {
            Commands.AddRange(for_add);
        }
        if (for_del.Any())
        {
            Commands = Commands.Where(x => !for_del.Contains(x.Id)).ToList();
        }
        Commands.ForEach(x => { EntrySortingModel? y = rest.Content.Entries.FirstOrDefault(z => z.Id == x.Id); if (y is not null) { x.Sorting = y.Sorting; } });
        Commands = Commands.OrderBy(x => x.Sorting).ToList();
        IsBusyProgress = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Rest(ScriptId);
    }

    void AddCommand(int position_num)
    {
        if (!Commands.Any())
        {
            Commands.Add(new EntrySortingModel() { Id = -1, Sorting = 1, Name = "cmd-1" });
            StateHasChanged();
            return;
        }

        int new_tmp_id = Commands.Min(x => x.Id);
        new_tmp_id = new_tmp_id > 0 ? -1 : new_tmp_id - 1;
        double new_position_num;
        if (Commands.Count() == position_num)
        {
            new_position_num = Math.Ceiling(Commands.Max(x => x.Sorting) + 1);
        }
        else if (position_num == 0)
        {
            new_position_num = Math.Floor(Commands.Min(x => x.Sorting) - 1);
        }
        else
        {
            Commands.Sort((x, y) => x.Sorting.CompareTo(y.Sorting));
            double prev_sorting_val = Commands[position_num - 1].Sorting;
            double next_sorting_val = Commands[position_num].Sorting;
            new_position_num = prev_sorting_val + ((next_sorting_val - prev_sorting_val) / 2.0);
        }

        string new_name = "new-cmd";
        for (int i = 1; i < int.MaxValue; i++)
        {
            new_name = $"cmd-{i}";
            if (!Commands.Any(x => x.Name == new_name))
                break;
        }

        Commands.Add(new EntrySortingModel() { Id = new_tmp_id, Sorting = new_position_num, Name = new_name });
        Commands.Sort((x, y) => x.Sorting.CompareTo(y.Sorting));
        StateHasChanged();
    }

    void DeleteCommand(int command_id)
    {
        int index_row = Commands.FindIndex(x => x.Id == command_id);
        if (index_row < 0)
            return;

        if (Commands[index_row].Id < 0)
        {
            Commands.RemoveAt(index_row);
            StateHasChanged();
            return;
        }

    }

    void UpdateCommand(CommandModelDB sender)
    {
        int index_row = Commands.FindIndex(x => x.Id == sender.Id);
        if (index_row > -1)
        {
            Commands.RemoveAt(index_row);
        }
#pragma warning disable CS4014
        Rest(ScriptId, false);
#pragma warning restore CS4014
    }

    public async Task Rest(int id, bool hard_reload = true)
    {
        IsBusyProgress = true;
        ApiResponse<EntriesSortingResponseModel> rest = await _refit.GetCommandsEntriesByScript(id);
        if (hard_reload)
        {
            Commands = new(rest.Content?.Entries ?? Array.Empty<EntrySortingModel>());
        }
        else
        {
            List<EntrySortingModel> cashe_commands = new List<EntrySortingModel>(rest.Content?.Entries ?? Array.Empty<EntrySortingModel>());

            IEnumerable<EntrySortingModel> commands_add = cashe_commands.Where(x => !Commands.Any(y => y.Id == x.Id)).ToArray();
            if (commands_add.Any())
            {
                Commands.AddRange(commands_add);
            }
        }

        IsBusyProgress = false;
        StateHasChanged();
    }
}