@using RazorLib.Shared.hardwares
@using Newtonsoft.Json;
@using MudBlazor;
@using SharedLib;
@using System.Web;

@inherits BlazorBusyComponentBaseModel

@inject IHardwaresService _hardwares
@inject ISnackbar Snackbar

<CascadingValue Value="@FormContext">
    <CascadingValue Value="@SendForm">
        <form class="alert alert-info m-3" role="alert">
            <h4>@NodeData.Text</h4>
            @if (NodeData.TreeItems?.Any() == true)
            {
                foreach (HtmlDomTreeItemDataModel node in NodeData.TreeItems)
                {
                    <HtmlNodeTranslatorComponent NodeData="node" />
                }
            }
        </form>
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter, EditorRequired]
    public HtmlDomTreeItemDataModel NodeData { get; set; } = default!;

    [CascadingParameter]
    public int? Id { get; set; }

    [CascadingParameter]
    public Action? ReloadPageHandle { get; set; }

    public FormContextModel? FormContext;

    protected override void OnInitialized()
    {
        string? _action = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("action", StringComparison.OrdinalIgnoreCase)).Value;
        FormContext = new FormContextModel() { FormAction = new(_action ?? "", UriKind.RelativeOrAbsolute) };
        base.OnInitialized();
    }

    void SendForm(string? ext_input_name, string? ext_input_value)
    {
        if (FormContext is null)
        {
            Snackbar.Add("FormContext is null. Ошибка {54E46BC9-830E-477B-9EFB-9D03B69C0E3F}", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
            return;
        }

        if (!string.IsNullOrWhiteSpace(ext_input_name))
        {
            if (FormContext.DataContext.ContainsKey(ext_input_name))
            {
                if (!string.IsNullOrWhiteSpace(ext_input_value))
                    FormContext.DataContext[ext_input_name] = ext_input_value;
                else
                    FormContext.DataContext.Remove(ext_input_name);
            }
            else if (!string.IsNullOrWhiteSpace(ext_input_value))
            {
                FormContext.DataContext.Add(ext_input_name, ext_input_value);
            }
        }
        string json = JsonConvert.SerializeObject(FormContext.DataContext);
        Snackbar.Add($"{FormContext.FormAction} > {json}", Severity.Normal, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        if (Id <= 0)
            return;

        InvokeAsync(async () =>
        {
            if (Id.HasValue)
            {
                IsBusyProgress = true;
                string path_query = string.Join("&", FormContext.DataContext.Select(x => $"{x.Key}={x.Value.ToString()}"));
                HttpResponseModel rest = await _hardwares.GetHardwareHtmlPage(new HardwareGetHttpRequestModel() { HardwareId = Id.Value, Path = $"?{path_query}" });
                if (!rest.IsSuccess)
                {
                    Snackbar.ShowMessagesResponse(rest.Messages);
                    return;
                }

                if (ReloadPageHandle is not null)
                {
                    FormContext?.DataContext.Clear();
                    ReloadPageHandle();
                }

                IsBusyProgress = false;
            }
        });

        //if (ReloadPageHandle is not null)
        //{
        //    FormContext?.DataContext.Clear();
        //    ReloadPageHandle();
        //}
    }
}