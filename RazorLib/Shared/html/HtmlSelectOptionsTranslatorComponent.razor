@using RazorLib.Shared.hardwares
@using Newtonsoft.Json;
@using MudBlazor;
@using SharedLib;

@inject ISnackbar _snackbar

@switch (NodeData.NodeName)
{
    case "optgroup":
        string? label = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("label", StringComparison.OrdinalIgnoreCase)).Value;
        <optgroup label="@label">
            @if (NodeData.TreeItems?.Any() == true)
            {
                foreach (TreeItemDataModel opt_node in NodeData.TreeItems)
                {
                    <HtmlSelectOptionsTranslatorComponent NodeData="opt_node" />
                }
            }
        </optgroup>
        break;
    case "option":
        string? opt_val = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("value", StringComparison.OrdinalIgnoreCase)).Value;
        bool IsSelected = !string.IsNullOrWhiteSpace(InputName) && FormContext?.DataContext.ContainsKey(InputName) == true
            ? FormContext.DataContext[InputName].ToString()?.Equals(opt_val, StringComparison.OrdinalIgnoreCase) == true
            : NodeData.Attributes?.Any(x => x.Key.Equals("selected", StringComparison.OrdinalIgnoreCase)) == true;
        if (IsSelected)
        {
            SetValue(opt_val, InputName);
            <option selected value="@opt_val">
                @NodeData.Text
            </option>
        }
        else
        {
            <option value="@opt_val">
                @NodeData.Text
            </option>
        }
        break;
    default:
        <HtmlNodeTranslatorComponent NodeData="NodeData" />
        break;
}

@code {
    [Parameter, EditorRequired]
    public TreeItemDataModel NodeData { get; set; } = default!;

    [CascadingParameter]
    public FormContextModel? FormContext { get; set; }

    [CascadingParameter]
    public Action<object?, string?> SetValue { get; set; } = default!;

    [CascadingParameter(Name = "InputName")]
    public string? InputName { get; set; }
}