@using RazorLib.Shared.hardwares
@using Newtonsoft.Json;
@using MudBlazor;
@using SharedLib;

@inject ClientConfigModel _conf
@inject IHardwaresService _hardwares
@inject ISnackbar _snackbar
@inject ILogger<HtmlInputTranslatorComponent> _logger

@switch (NodeData.NodeName)
{
    case "input":
        switch (InputFormType)
        {
            case InputFormTypesEnum.Submit:
                <button @onclick="() => SendForm(InputName, InputValue)" type="button" class="btn btn-warning mb-1">@InputValue</button>
                break;
            case InputFormTypesEnum.Checkbox:
                //bool is_checked = NodeData.Attributes?.Any(x => x.Key.Equals("checked", StringComparison.OrdinalIgnoreCase)) == true;
                <HtmlCheckboxTranslatorComponent SetValueHandler="SetInputValue" InputName="@InputName" InputValue="@InputValue" />
                break;
            case InputFormTypesEnum.Hidden:
                <div class="@(IsDebug ? "border border-primary-subtle mb-3 p-2" : "d-none")">
                    <label for="hidden-input_@(InputName)" class="form-label">Скрытое поле</label>
                    <div class="input-group">
                        <span class="input-group-text" id="basic-addon-span_@(InputName)">@InputName</span>
                        <input readonly disabled type="text" class="form-control" id="hidden-input_@(InputName)" aria-describedby="basic-addon-span_@(InputName)" value="@InputValue">
                    </div>
                </div>
                break;
            default:
                string _size = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("size", StringComparison.OrdinalIgnoreCase)).Value ?? "20";
                string? _maxlength = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("maxlength", StringComparison.OrdinalIgnoreCase)).Value;

                if (string.IsNullOrWhiteSpace(_maxlength))
                {
                    <input type="@(InputFormType.ToString().ToLower())" @bind="InputValue" name="@InputName" class="form-control" size="@_size" aria-describedby="@($"{InputName}Help")" />
                    <div id="@($"{InputName}Help")" class="form-text mb-3">@((MarkupString)(_conf.AboutInputInfo(InputName, PagePath) ?? $"error `{InputName}` CCD7D4DF-E09A-4F3B-8DA4-2B724B98B537"))</div>
                }
                else
                {
                    <input type="@(InputFormType.ToString().ToLower())" @bind="InputValue" name="@InputName" class="form-control" size="@_size" maxlength="@_maxlength" aria-describedby="@($"{InputName}Help")" />
                    <div id="@($"{InputName}Help")" class="form-text mb-3">@((MarkupString)(_conf.AboutInputInfo(InputName, PagePath) ?? $"error `{InputName}` F523907C-79FA-407F-A3F7-E1F41FBE0652"))</div>
                }

                break;
        }

        break;
    case "select":
        <select @bind="InputValue" name="@InputName" class="form-select" aria-describedby="@($"{InputName}Help")">
            @if (NodeData.TreeItems?.Any() == true)
            {
                if (!string.IsNullOrWhiteSpace(InputName) && FormContext?.DataContext.ContainsKey(InputName) != true)
                    InputValue = GetSelectedOption(NodeData.TreeItems);

                <CascadingValue Value="InputName" Name="InputName">
                    <CascadingValue Value="InputValue" Name="InputValue">
                        @foreach (HtmlDomTreeItemDataModel opt_node in NodeData.TreeItems)
                        {
                            <HtmlSelectOptionsTranslatorComponent NodeData="opt_node" />
                        }
                    </CascadingValue>
                </CascadingValue>
            }
        </select>
        <div id="@($"{InputName}Help")" class="form-text mb-3">@((MarkupString)(_conf.AboutInputInfo(InputName, PagePath) ?? $"error `{InputName}` 54BBE107-8568-473C-9ADD-5EF18F89D850"))</div>
        break;
    default:
        <HtmlNodeTranslatorComponent NodeData="NodeData" />
        break;
}

@code {
    [Parameter, EditorRequired]
    public required HtmlDomTreeItemDataModel NodeData { get; set; }

    [CascadingParameter]
    public FormContextModel? FormContext { get; set; }

    [CascadingParameter]
    public int? Id { get; set; }

    [CascadingParameter]
    public Action? ReloadPageHandle { get; set; }

    [CascadingParameter]
    public required Action<string?, string?> SendForm { get; set; }

    /// <summary>
    /// Адрес страницы (URI) в управляющем контролере
    /// </summary>
    [CascadingParameter(Name = "PagePath")]
    public required string PagePath { get; set; }

    public InputFormTypesEnum InputFormType { get; private set; } = InputFormTypesEnum.Text;

    string? _static_input_value = null;
    public string? InputValue
    {
        get
        {
            if (!string.IsNullOrWhiteSpace(_static_input_value) || string.IsNullOrWhiteSpace(InputName) || FormContext is null)
                return _static_input_value;

            string? res = null;

            try
            {
                res = FormContext.DataContext?.GetValueOrDefault(InputName)?.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("error {EC4EC565-39A2-4BFB-B7CC-9F128E84F06A}", ex);
            }

            if (res is null)
                res = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("value", StringComparison.OrdinalIgnoreCase)).Value;

            return res;
        }
        private set
        {
            SetInputValue(value, InputName);
        }
    }
    public string? InputName { get; private set; }

    protected override void OnInitialized()
    {
        InputName = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("name", StringComparison.OrdinalIgnoreCase)).Value;

        string? _type = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("type", StringComparison.OrdinalIgnoreCase)).Value;
        if (Enum.TryParse(_type?.UpperFirstChar(), out InputFormTypesEnum myType))
            InputFormType = myType;
        else if (InputName?.Equals("pwd", StringComparison.OrdinalIgnoreCase) == true)
            InputFormType = InputFormTypesEnum.Password;
        else if (!string.IsNullOrWhiteSpace(_type))
            _snackbar.Add($"INPUT [InputName:{InputName}][InputValue:{InputValue}] не определён тип: [InputType: {_type}] (код ошибки: {{7B99966D-145C-4506-9F13-BA70B5DC0B11}})", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);

        if (InputFormType == InputFormTypesEnum.Submit)
            _static_input_value = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("value", StringComparison.OrdinalIgnoreCase)).Value;
        else if (InputFormType != InputFormTypesEnum.Checkbox)
            InputValue = FormContext?.DataContext.Any(x => x.Key.Equals(InputName, StringComparison.OrdinalIgnoreCase)) == true
            ? FormContext?.DataContext.FirstOrDefault(x => x.Key.Equals(InputName, StringComparison.OrdinalIgnoreCase)).Value.ToString()
            : NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("value", StringComparison.OrdinalIgnoreCase)).Value;

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            if (InputFormType != InputFormTypesEnum.Submit && InputFormType != InputFormTypesEnum.Checkbox && !NodeData.NodeName.Equals("select", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(InputName) && FormContext?.DataContext.ContainsKey(InputName) != true)
                InputValue = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("value", StringComparison.OrdinalIgnoreCase)).Value;
        }

        base.OnAfterRender(firstRender);
    }

    string? GetSelectedOption(HtmlDomModel options_or_optgroups)
    {
        string? res = "";

        foreach (HtmlDomTreeItemDataModel el in options_or_optgroups)
        {
            if (el.Attributes?.Any(x => x.Key.Equals("selected")) == true)
                return el.Attributes?.FirstOrDefault().Value;

            if (el.TreeItems?.Any() == true)
            {
                res = GetSelectedOption(el.TreeItems);
                if (!string.IsNullOrEmpty(res))
                    return res;
            }
        }

        return res;
    }

    void SetInputValue(string? val, string? input_name)
    {
        //_snackbar.Add($"[{input_name}={val}]", Severity.Info, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        if (string.IsNullOrWhiteSpace(input_name))
        {
            _static_input_value = val?.ToString();
            return;
        }

        if (val is null && FormContext?.DataContext.ContainsKey(input_name) == true)
        {
            FormContext.DataContext.Remove(input_name);
            return;
        }

        if (val is not null)
        {
            if (FormContext?.DataContext.ContainsKey(input_name) == true)
                FormContext.DataContext[input_name] = val;
            else if (FormContext is not null)
                FormContext.DataContext.Add(input_name, val);
        }
    }

#if DEBUG
    bool IsDebug => true;
#else
    bool IsDebug => false;
#endif


}