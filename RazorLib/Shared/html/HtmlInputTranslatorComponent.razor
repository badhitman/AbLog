@using RazorLib.Shared.hardwares
@using Newtonsoft.Json;
@using MudBlazor;
@using SharedLib;

@inject ISnackbar _snackbar

@switch (NodeData.NodeName)
{
    case "input":
        switch (InputFormType)
        {
            case InputFormTypesEnum.Submit:
                <button @onclick="() => SendForm(InputName, InputValue)" type="button" class="btn btn-warning">@InputValue</button>
                break;
            case InputFormTypesEnum.Checkbox:
                bool is_checked = NodeData.Attributes?.Any(x => x.Key.Equals("checked", StringComparison.OrdinalIgnoreCase)) == true;
                <HtmlCheckboxTranslatorComponent SetValueHandler="SetInputValue" InputName="@InputName" InputValue="@InputValue" IsChecked="is_checked" />
                break;
            default:
                string _size = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("size", StringComparison.OrdinalIgnoreCase)).Value ?? "20";
                string? _maxlength = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("maxlength", StringComparison.OrdinalIgnoreCase)).Value;

                if (string.IsNullOrWhiteSpace(_maxlength))
                {
                    <input type="@(InputFormType.ToString().ToLower())" @bind="InputValue" name="@InputName" class="form-control" size="@_size" />
                }
                else
                {
                    <input type="@(InputFormType.ToString().ToLower())" @bind="InputValue" name="@InputName" class="form-control" size="@_size" maxlength="@_maxlength" />
                }

                break;
        }

        break;
    case "select":
        <select @bind="InputValue" name="@InputName" class="form-select">
            <CascadingValue Value="SetInputValue">
                <CascadingValue Value="InputName" Name="InputName">
                    @if (NodeData.TreeItems?.Any() == true)
                    {
                        foreach (TreeItemDataModel opt_node in NodeData.TreeItems)
                        {
                            <HtmlSelectOptionsTranslatorComponent NodeData="opt_node" />
                        }
                    }
                </CascadingValue>
            </CascadingValue>
        </select>
        break;
    default:
        <HtmlNodeTranslatorComponent NodeData="NodeData" />
        break;
}

@code {
    [Parameter, EditorRequired]
    public TreeItemDataModel NodeData { get; set; } = default!;

    [CascadingParameter]
    public FormContextModel? FormContext { get; set; }

    [CascadingParameter]
    public Action? ReloadPageHandle { get; set; }

    public InputFormTypesEnum InputFormType { get; private set; } = InputFormTypesEnum.Text;

    string? _static_input_value = null;
    public string? InputValue
    {
        get
        {
            if (!string.IsNullOrWhiteSpace(_static_input_value) || string.IsNullOrWhiteSpace(InputName) || FormContext is null)
                return _static_input_value;

            string? res = FormContext.DataContext?.GetValueOrDefault(InputName)?.ToString();
            if (res is null)
                res = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("value", StringComparison.OrdinalIgnoreCase)).Value;

            return res;
        }
        private set
        {
            SetInputValue(value, InputName);
        }
    }
    public string? InputName { get; private set; }

    protected override void OnInitialized()
    {
        InputName = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("name", StringComparison.OrdinalIgnoreCase)).Value;

        string? _type = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("type", StringComparison.OrdinalIgnoreCase)).Value;
        if (Enum.TryParse(_type?.UpperFirstChar(), out InputFormTypesEnum myType))
            InputFormType = myType;
        else if (InputName?.Equals("pwd", StringComparison.OrdinalIgnoreCase) == true)
            InputFormType = InputFormTypesEnum.Password;
        else if (!string.IsNullOrWhiteSpace(_type))
            _snackbar.Add($"INPUT [InputName:{InputName}][InputValue:{InputValue}] не определён тип: [InputType: {_type}] (код ошибки: {{7B99966D-145C-4506-9F13-BA70B5DC0B11}})", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);

        if (InputFormType == InputFormTypesEnum.Submit)
            _static_input_value = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("value", StringComparison.OrdinalIgnoreCase)).Value;
        else if (InputFormType != InputFormTypesEnum.Checkbox)
            InputValue = FormContext?.DataContext.Any(x => x.Key.Equals(InputName, StringComparison.OrdinalIgnoreCase)) == true
            ? FormContext?.DataContext.FirstOrDefault(x => x.Key.Equals(InputName, StringComparison.OrdinalIgnoreCase)).Value.ToString()
            : NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("value", StringComparison.OrdinalIgnoreCase)).Value;

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            if (InputFormType != InputFormTypesEnum.Submit && InputFormType != InputFormTypesEnum.Checkbox && !NodeData.NodeName.Equals("select", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(InputName) && FormContext?.DataContext.ContainsKey(InputName) != true)
                InputValue = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("value", StringComparison.OrdinalIgnoreCase)).Value;
        }

        base.OnAfterRender(firstRender);
    }

    void SetInputValue(object? val, string? input_name)
    {
        //_snackbar.Add($"[{input_name}={val}]", Severity.Info, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        if (string.IsNullOrWhiteSpace(input_name))
        {
            _static_input_value = val?.ToString();
            return;
        }

        if (val is null && FormContext?.DataContext.ContainsKey(input_name) == true)
        {
            FormContext.DataContext.Remove(input_name);
            return;
        }

        if (val is not null)
        {
            if (FormContext?.DataContext.ContainsKey(input_name) == true)
                FormContext.DataContext[input_name] = val;
            else if (FormContext is not null)
                FormContext.DataContext.Add(input_name, val);
        }
    }

    void SendForm(string? ext_input_name, string? ext_input_value)
    {
        if (FormContext is null)
        {
            _snackbar.Add("FormContext is null. Ошибка {54E46BC9-830E-477B-9EFB-9D03B69C0E3F}", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
            return;
        }

        if (!string.IsNullOrWhiteSpace(ext_input_name))
        {
            if (FormContext.DataContext.ContainsKey(ext_input_name))
            {
                if (!string.IsNullOrWhiteSpace(ext_input_value))
                    FormContext.DataContext[ext_input_name] = ext_input_value;
                else
                    FormContext.DataContext.Remove(ext_input_name);
            }
            else if (!string.IsNullOrWhiteSpace(ext_input_value))
            {
                FormContext.DataContext.Add(ext_input_name, ext_input_value);
            }
        }

        string json = JsonConvert.SerializeObject(FormContext.DataContext);
        _snackbar.Add($"{FormContext.FormAction} > {json}", Severity.Info, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);

        if (ReloadPageHandle is not null)
        {
            FormContext?.DataContext.Clear();
            ReloadPageHandle();
        }
    }
}