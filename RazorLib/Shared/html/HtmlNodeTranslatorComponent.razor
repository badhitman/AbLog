@using RazorLib.Shared.hardwares
@using Newtonsoft.Json;
@using MudBlazor;
@using SharedLib;

@inject ISnackbar _snackbar

@switch (NodeData.NodeName)
{
    case "a":
        string? href = NodeData.Attributes?.FirstOrDefault(x => x.Key.Equals("href", StringComparison.OrdinalIgnoreCase)).Value;
        if (Uri.TryCreate(href, UriKind.Relative, out Uri? _uri) && NodeData.Text?.Equals("Back", StringComparison.OrdinalIgnoreCase) != true)
        {
            <HardwareNavButtonComponent NavHref="@href" Text="@NodeData.Text" />
        }
        break;
    case "br":
        <br />
        break;
    case "form":
        <HtmlFormTranslatorComponent NodeData="NodeData" />
        break;
    default:
        if (input_tags.Contains(NodeData.NodeName))
        {
            <HtmlInputTranslatorComponent NodeData="NodeData" />
        }
        else
        {
            <div title="Не опознанный тип узла DOM (код ошибки: {6055A7E3-A10D-4CAF-84DF-AD944B7CD98D})" class="badge text-bg-warning">
                @NodeData.Title
                @if (NodeData.TreeItems?.Any() == true)
                {
                    foreach (TreeItemDataModel node in NodeData.TreeItems)
                    {
                        <HtmlNodeTranslatorComponent NodeData="node" />
                    }
                }
            </div>
        }
        break;
}

@code {
    [Parameter, EditorRequired]
    public TreeItemDataModel NodeData { get; set; } = default!;

    static string[] input_tags = new string[] { "input", "select" };
}