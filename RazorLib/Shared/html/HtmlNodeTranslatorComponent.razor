@using Newtonsoft.Json;
@using RazorLib.Shared.hardwares
@using MudBlazor;
@using SharedLib;

@inject ISnackbar _snackbar

@switch (NodeData.NodeName.ToLower())
{
    case "a":
        string? href = NodeData.Attributes?.FirstOrDefault(x => x.Name.Equals("href", StringComparison.OrdinalIgnoreCase))?.Value;
        if (Uri.TryCreate(href, UriKind.Relative, out Uri? _uri) && !NodeData.Text?.Equals("Back", StringComparison.OrdinalIgnoreCase) == true)
        {
            <HardwareNavButtonComponent NavHref="@href" Text="@NodeData.Text" />
        }
        break;
    case "br":
        <br />
        break;
    case "option":
        <option>
            @NodeData.Title
        </option>
        break;
    case "select":
        <select class="form-select">
            @if (NodeData.TreeItems?.Any() == true)
            {
                foreach (TreeItemDataModel node in NodeData.TreeItems)
                {
                    <HtmlNodeTranslatorComponent NodeData="node" />
                }
            }
        </select>
        break;
    case "input":
        string? _class = null;
        string? _type = NodeData.Attributes?.FirstOrDefault(x => x.Name.Equals("type", StringComparison.OrdinalIgnoreCase))?.Value;
        string? _name = NodeData.Attributes?.FirstOrDefault(x => x.Name.Equals("name", StringComparison.OrdinalIgnoreCase))?.Value;
        string? _val = NodeData.Attributes?.FirstOrDefault(x => x.Name.Equals("value", StringComparison.OrdinalIgnoreCase))?.Value;

        if (_type?.Equals("submit", StringComparison.OrdinalIgnoreCase) == true)
        {
            _class = "btn btn-primary";
        }
        else if (_type?.Equals("checkbox", StringComparison.OrdinalIgnoreCase) == true)
        {
            _class = "form-check-input";
        }
        else
        {
            _class = "form-control";
        }


        if (_type?.Equals("submit", StringComparison.OrdinalIgnoreCase) == true)
        {
            <button @onclick="SendForm" type="button" class="btn btn-warning">@_val</button>
        }
        else
        {
            SetInputValue(_name, _val);
            InputValue = _val;
            <input type="@_type" value="@InputValue" name="@_name" @onchange="@((ChangeEventArgs __e) => SetInputValue(_name,__e.Value?.ToString()))" class="@_class" />
        }
        break;
    case "form":
        string? _action = NodeData.Attributes?.FirstOrDefault(x => x.Name.Equals("action", StringComparison.OrdinalIgnoreCase))?.Value;
        FormContextModel _context = new FormContextModel() { FormAction = new(_action ?? "") };
        <CascadingValue Value="@_context">
            <form>
                <h4>@NodeData.Text</h4>
                @if (NodeData.TreeItems?.Any() == true)
                {
                    foreach (TreeItemDataModel node in NodeData.TreeItems)
                    {
                        <HtmlNodeTranslatorComponent NodeData="node" />
                    }
                }
            </form>
        </CascadingValue>
        break;
    default:
        <text>@NodeData.Text</text>
        break;
}

@code {
    [Parameter, EditorRequired]
    public TreeItemDataModel NodeData { get; set; } = default!;

    [CascadingParameter]
    protected FormContextModel? FormContext { get; set; }

    string? InputValue { get; set; }

    void SetInputValue(string? input_name, string? val)
    {
        if (string.IsNullOrWhiteSpace(input_name))
            return;

        if (InputValue?.Equals(val, StringComparison.OrdinalIgnoreCase) != true)
            InputValue = val;

        input_name = input_name.ToLower();

        if (string.IsNullOrEmpty(InputValue) && FormContext?.DataContext.ContainsKey(input_name) == true)
        {
            FormContext.DataContext.Remove(input_name);
            return;
        }

        if (!string.IsNullOrEmpty(InputValue))
        {
            if (FormContext?.DataContext.ContainsKey(input_name) == true)
                FormContext.DataContext[input_name] = InputValue;
            else if (FormContext is not null)
                FormContext.DataContext.Add(input_name, InputValue);
        }
        //StateHasChanged();
    }

    void SendForm()
    {
        _snackbar.Add($"{FormContext?.FormAction} > {JsonConvert.SerializeObject(FormContext?.DataContext)}", Severity.Info, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
    }
}