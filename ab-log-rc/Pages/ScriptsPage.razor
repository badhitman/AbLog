@page "/scripts-page"

@using RazorLib.Shared.navs.tabs
@using RazorLib.Shared;
@using MudBlazor;
@using SharedLib;

@* @inject IRefitScriptsService _refit; *@
@inject ISnackbar _snackbar;

@inherits BlazorBusyComponentBaseModel

<PageTitle>Скрипты</PageTitle>

<nav class="navbar navbar-light mb-3">
    <div class="container-fluid">
        <span class="navbar-brand">
            Скрипты [<small class="text-muted">пакетные задания</small>]
            <sup class="oi oi-reload"></sup>
        </span>
        <div id="navbarSupportedContent">
            <form class="d-flex">
                <button @onclick="AddNewScript" class="btn btn-outline-success" type="button">Создать новый</button>
            </form>
        </div>
    </div>
</nav>
<div class="alert alert-primary" role="alert">
    <cite class="text-primary">Пакеты команд</cite> с настраиваемой логикой выполнения.
    Команды в скрипте имеют возможность ветвления (по условию), выходов (прекращение выполнения) и пользовательским переходов в произвольный [<span class="text-danger-emphasis">шаг</span>/<span class="text-danger-emphasis">команду</span>] другого скрипта.
</div>
@if (IsBusyProgress)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    if (ScriptsAll?.Any() != true)
    {
        <div class="alert alert-danger" role="alert">
            Скриптов нет
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-3">
                <div class="list-group">
                    @foreach (ScriptModelDB script in ScriptsAll)
                    {
                        <span @key="@($"script-menu-item-{script.Id}")" @onclick="async () => { CurrentScript = script; ResetFormState(ResetFormModesEnum.EditToOrign); if(_commandsListRef is not null){ await _commandsListRef.Rest(script.Id); } if(_contentionsRef is not null){ await _contentionsRef.Rest(script.Id); } }" class="list-group-item list-group-item-action @(CurrentScript.Id == script.Id ? "active" : "")" aria-current="true">
                            <div class="d-flex w-100 justify-content-between">
                                <h5 class="mb-1">
                                    @(script.Name)
                                    <sup>
                                        #@(script.Id > 0 ? script.Id.ToString() : "new")
                                    </sup>
                                </h5>
                                @if (script.Id > 0)
                                {
                                    <small title="Количество команд в скрипте">
                                        @(script.Commands?.Count)
                                        <sup class="oi oi-bolt"></sup>
                                    </small>
                                }
                                else
                                {
                                    <small title="Запишите скрипт">
                                        -NEW-
                                        <sup class="oi oi-file text-@(script.Id == CurrentScript.Id ? "warning" : "danger")"></sup>
                                    </small>
                                }
                            </div>
                            @if (script.Id > 0)
                            {
                                <p class="mb-1">Тригер порт №: 000</p>
                                <small>При включении</small>
                            }
                        </span>
                    }
                </div>
            </div>
            <div class="col-9">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            Скрипт
                            @if (CurrentScript.Id > 0)
                            {
                                <span>@($"#{CurrentScript.Id}")</span>
                            }
                            else
                            {
                                <span class="text-info">[не записан]</span>
                            }
                        </h5>
                        <hr />
                        <TabSetComponent>
                            <TabComponent Tooltip="Наименование и описание скрипта" Title="Описание">
                                <EditForm @ref="_formRef" autocomplete="off" Model="@CurrentScript">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="mb-4">
                                        <label for="exampleInputTitle" class="form-label">Название</label>
                                        <CustomInputTextComponent @bind-Value="CurrentScript.Name" class="form-control" id="exampleInputTitle" aria-describedby="nameHelp" />
                                        <div id="nameHelp" class="form-text">Наименование скрипта.</div>
                                    </div>
                                    <div class="mb-4">
                                        <label for="exampleInputTitle2" class="form-label">Описание скрипта</label>
                                        <InputRichTextComponent Id="exampleInputTitle2" @bind-Value="CurrentScript.Description" @ref="_textBoxRef" />
                                    </div>
                                    @if (CurrentScript.Id > 0)
                                    {
                                        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-3">
                                            <button @onclick="SaveScriptHandle" disabled="@(!CanSaveScript)" class="btn btn-outline-primary" type="button">Сохранить</button>
                                            <button @onclick="() => { ResetFormState(ResetFormModesEnum.OrignToEdit); }" disabled="@(!CanSaveScript)" class="btn btn-outline-info" type="button">Отмена</button>
                                            <button @onclick="DeleteScript" class="btn btn-outline-danger" type="button">@(script_init_del ? "Подтвердить удаление" : "Удалить")</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="d-grid gap-2">
                                            <button @onclick="SaveScriptHandle" disabled="@(!CanSaveScript)" class="btn btn-outline-primary" type="button">Записать</button>
                                            <button @onclick="DeleteScript" class="btn btn-@(script_init_del ? "" : "outline-")danger" type="button">@(script_init_del ? "Подтвердить удаление" : "Удалить")</button>
                                        </div>
                                    }
                                </EditForm>
                            </TabComponent>
                            <TabComponent IsDisabled="CurrentScript.Id <= 0" Tooltip="Команды" Title="Команды">
                                <CommandsListComponent AllScripts="ScriptsAll" @ref="_commandsListRef" ScriptId="CurrentScript.Id" />
                            </TabComponent>
                            <TabComponent IsDisabled="CurrentScript.Id <= 0" Tooltip="Режим конкуренции и взаимной блокировки" Title="Конкуренция">
                                <ScriptContentionComponent AllScripts="ScriptsAll" @ref="_contentionsRef" ScriptId="CurrentScript.Id" />
                            </TabComponent>
                        </TabSetComponent>
                    </div>
                </div>
            </div>
        </div>
    }
}
<br />
<ModalWindowComponent @ref="Modal">
    <p>@ModalBodyText</p>
</ModalWindowComponent>

@code {
    List<ScriptModelDB> ScriptsAll = new();
    ScriptModelDB CurrentScript = new();

    EditForm? _formRef;
    InputRichTextComponent? _textBoxRef;
    CommandsListComponent? _commandsListRef;
    ScriptContentionComponent? _contentionsRef;

    bool CanSaveScript
    {
        get
        {
            return !string.IsNullOrWhiteSpace(CurrentScript.Name) &&
            (CurrentScript.Id < 1 || script_name_orign != CurrentScript.Name || script_desc_orign != CurrentScript.Description);
        }
    }

    bool script_init_del = false;
    string script_name_orign = string.Empty;
    string script_desc_orign = string.Empty;

    async Task DeleteScript()
    {
        if (!script_init_del)
        {
            script_init_del = true;
            return;
        }

        if (CurrentScript.Id > 0)
        {
            IsBusyProgress = true;
            // ApiResponse<ScriptsResponseModel> rest = await _refit.ScriptDelete(CurrentScript.Id);
            // if (!rest.IsSuccessStatusCode)
            // {
            //     ModalBodyText = $"Ошибка: {rest.StatusCode}";
            //     Modal?.Open("Ошибка");
            //     return;
            // }
            // if (rest.Content is null)
            // {
            //     ModalBodyText = $"rest.Content is null";
            //     Modal?.Open("Ошибка");
            //     return;
            // }
            // if (!rest.Content.IsSuccess)
            // {
            //     ModalBodyText = rest.Content.Message;
            //     Modal?.Open("Ошибка");
            //     return;
            // }
            ScriptsAll.RemoveAt(ScriptsAll.FindIndex(x => x.Id == CurrentScript.Id));
            IsBusyProgress = false;
        }
        else
        {
            ScriptsAll.RemoveAt(ScriptsAll.FindIndex(x => x.Id == CurrentScript.Id));
        }
        CurrentScript = ScriptsAll.FirstOrDefault() ?? new();
        script_init_del = false;
    }

    /// <summary>
    /// Сброс состояния формы
    /// </summary>
    /// <param name="mode">Режимы сброса состояния формы</param>
    void ResetFormState(ResetFormModesEnum mode)
    {
        script_init_del = false;
        if (mode == ResetFormModesEnum.EditToOrign)
        {
            script_name_orign = CurrentScript.Name;
            script_desc_orign = CurrentScript.Description ?? string.Empty;
        }
        else
        {
            CurrentScript.Name = script_name_orign;
            CurrentScript.Description = script_desc_orign;
        }
    }

    ModalWindowComponent? Modal { get; set; }
    string ModalBodyText { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        IsBusyProgress = true;
        // ApiResponse<ScriptsResponseModel> rest_all_scripts = await _refit.ScriptsGetAll();
        // if (rest_all_scripts.Content?.Scripts is null)
        // {
        //     _snackbar.Add("res.Content?.Scripts is null ошибка {45E0C870-67E6-4F33-AC1A-644C828148E9}", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        //     return;
        // }
        // ScriptsAll = rest_all_scripts.Content.Scripts;

        if (ScriptsAll.Any())
            CurrentScript = ScriptsAll.First();

        ResetFormState(ResetFormModesEnum.EditToOrign);
        IsBusyProgress = false;
    }

    void AddNewScript()
    {
        string new_name = string.Empty;
        foreach (int i in Enumerable.Range(1, int.MaxValue))
        {
            new_name = $"Новый скрипт {i}";
            if (!ScriptsAll.Any(x => x.Name.ToLower() == new_name.ToLower()))
                break;
        }

        int _id = ScriptsAll.Any() ? ScriptsAll.Min(x => x.Id) - 1 : 0;
        if (_id > 0)
            _id = 0;

        ScriptsAll.Add(new() { Id = _id, Commands = new(), Name = new_name });
        CurrentScript = ScriptsAll.Last();
    }

    async Task SaveScriptHandle()
    {
        IsBusyProgress = true;
        // ApiResponse<ScriptsResponseModel> rest = await _refit.ScriptUpdateOrCreate(new EntryDescriptionModel() { Id = CurrentScript.Id, Name = CurrentScript.Name, Description = CurrentScript.Description });
        // if (rest.Content?.Scripts is null)
        // {
        //     _snackbar.Add("rest.Content?.Scripts is null ошибка {093F4C03-E89C-40F9-931D-EDB389FF56A6}", Severity.Error, conf => conf.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow);
        //     return;
        // }

        // ScriptModelDB src = rest.Content.Scripts.First(x => x.Name == CurrentScript.Name);
        // CurrentScript.Id = src.Id;
        // CurrentScript.Name = src.Name;
        // CurrentScript.Description = src.Description;
        // ResetFormState(ResetFormModesEnum.EditToOrign);

        // int[] rows_for_del = ScriptsAll.Where(x => x.Id > 0 && !rest.Content.Scripts.Any(y => y.Id == x.Id)).Select(x => x.Id).Distinct().ToArray();
        // while (ScriptsAll.Any(x => rows_for_del.Contains(x.Id)))
        // {
        //     ScriptsAll.RemoveAt(ScriptsAll.FindIndex(x => rows_for_del.Contains(x.Id)));
        // }
        // ScriptModelDB[] rows_for_add = rest.Content.Scripts.Where(x => x.Id != src.Id && !ScriptsAll.Any(y => y.Id == x.Id)).ToArray();
        // if (rows_for_add.Any())
        // {
        //     ScriptsAll.AddRange(rows_for_add);
        // }
        IsBusyProgress = false;
    }
}